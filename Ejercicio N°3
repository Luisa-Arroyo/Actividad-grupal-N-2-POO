# Ejercicio N°3
from enum import Enum


class TipoCombustible(Enum):
    GASOLINA = "Gasolina"
    BIOETANOL = "Bioetanol"
    DIESEL = "Diésel"
    BIODIESEL = "Biodiésel"
    GAS_NATURAL = "Gas Natural"


class TipoAutomovil(Enum):
    CIUDAD = "Ciudad"
    SUBCOMPACTO = "Subcompacto"
    COMPACTO = "Compacto"
    FAMILIAR = "Familiar"
    EJECUTIVO = "Ejecutivo"
    SUV = "SUV"


class TipoColor(Enum):
    BLANCO = "Blanco"
    NEGRO = "Negro"
    ROJO = "Rojo"
    NARANJA = "Naranja"
    AMARILLO = "Amarillo"
    VERDE = "Verde"
    AZUL = "Azul"
    VIOLETA = "Violeta"


class Automovil:
    def __init__(self, marca, modelo, motor, tipo_combustible, tipo_automovil,
                 numero_puertas, cantidad_asientos, velocidad_maxima, color):
        self.marca = marca
        self.modelo = modelo
        self.motor = motor
        self.tipo_combustible = tipo_combustible
        self.tipo_automovil = tipo_automovil
        self.numero_puertas = numero_puertas
        self.cantidad_asientos = cantidad_asientos
        self.velocidad_maxima = velocidad_maxima
        self.color = color
        self.velocidad_actual = 0

    # Métodos Get y Set
    def get_marca(self):
        return self.marca

    def set_marca(self, marca):
        self.marca = marca

    def get_modelo(self):
        return self.modelo

    def set_modelo(self, modelo):
        self.modelo = modelo

    def get_motor(self):
        return self.motor

    def set_motor(self, motor):
        self.motor = motor

    def get_tipo_combustible(self):
        return self.tipo_combustible

    def set_tipo_combustible(self, tipo_combustible):
        self.tipo_combustible = tipo_combustible

    def get_tipo_automovil(self):
        return self.tipo_automovil

    def set_tipo_automovil(self, tipo_automovil):
        self.tipo_automovil = tipo_automovil

    def get_numero_puertas(self):
        return self.numero_puertas

    def set_numero_puertas(self, numero_puertas):
        self.numero_puertas = numero_puertas

    def get_cantidad_asientos(self):
        return self.cantidad_asientos

    def set_cantidad_asientos(self, cantidad_asientos):
        self.cantidad_asientos = cantidad_asientos

    def get_velocidad_maxima(self):
        return self.velocidad_maxima

    def set_velocidad_maxima(self, velocidad_maxima):
        self.velocidad_maxima = velocidad_maxima

    def get_color(self):
        return self.color

    def set_color(self, color):
        self.color = color

    def get_velocidad_actual(self):
        return self.velocidad_actual

    def set_velocidad_actual(self, velocidad_actual):
        self.velocidad_actual = velocidad_actual

    # Métodos funcionales
    def acelerar(self, incremento):
        if self.velocidad_actual + incremento <= self.velocidad_maxima:
            self.velocidad_actual += incremento
        else:
            print("No se puede superar la velocidad máxima.")

    def desacelerar(self, decremento):
        if self.velocidad_actual - decremento >= 0:
            self.velocidad_actual -= decremento
        else:
            print("No se puede tener una velocidad negativa.")

    def frenar(self):
        self.velocidad_actual = 0

    def calcular_tiempo_llegada(self, distancia):
        if self.velocidad_actual > 0:
            return distancia / self.velocidad_actual
        else:
            print("La velocidad actual es 0. No se puede calcular el tiempo.")
            return None

    def imprimir(self):
        print(f"Marca: {self.marca}")
        print(f"Modelo: {self.modelo}")
        print(f"Motor: {self.motor}L")
        print(f"Tipo de combustible: {self.tipo_combustible.value}")
        print(f"Tipo de automóvil: {self.tipo_automovil.value}")
        print(f"Número de puertas: {self.numero_puertas}")
        print(f"Cantidad de asientos: {self.cantidad_asientos}")
        print(f"Velocidad máxima: {self.velocidad_maxima} km/h")
        print(f"Color: {self.color.value}")
        print(f"Velocidad actual: {self.velocidad_actual} km/h")


# Método main
def main():
    auto1 = Automovil(
        "Ford", 2018, 3,
        TipoCombustible.DIESEL,
        TipoAutomovil.EJECUTIVO,
        5, 6, 250,
        TipoColor.NEGRO
    )

    auto1.imprimir()

    auto1.set_velocidad_actual(100)
    print(f"Velocidad actual: {auto1.get_velocidad_actual()} km/h")

    auto1.acelerar(20)
    print(f"Velocidad actual: {auto1.get_velocidad_actual()} km/h")

    auto1.desacelerar(50)
    print(f"Velocidad actual: {auto1.get_velocidad_actual()} km/h")

    auto1.frenar()
    print(f"Velocidad actual: {auto1.get_velocidad_actual()} km/h")

    auto1.desacelerar(20)  # Verifica el mensaje de error


if __name__ == "__main__":
    main()
